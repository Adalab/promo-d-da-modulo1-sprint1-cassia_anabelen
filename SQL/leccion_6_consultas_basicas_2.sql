-- Pair programming Consultas b√°sicas 2

-- EJERCICIO 1
-- Conociendo el tipo de productos que vendemos en Northwind:
-- Crea una consulta que muestre los primeros 10 productos seg√∫n su ID y que nos indique el nombre de dichos productos y sus precios.

SELECT product_name, unit_price
	FROM products
    ORDER BY product_id
    LIMIT 10;

-- EJERCICIO 2
-- Ordenando los resultados:
-- Ahora realiza la misma consulta pero que nos muestre los √∫ltimos 10 productos seg√∫n su ID de manera descendiente.

SELECT product_name, unit_price
	FROM products
    ORDER BY product_id DESC
    LIMIT 10;

-- EJERCICIO 3
-- Que pedidos tenemos en nuestra BBDD:
-- √öltimamente ha habido algo de descontrol en la empresa a la hora de controlar los pedidos. 
-- Nos interesa conocer qu√© pedidos distintos hemos tenido (eliminando entradas duplicadas seg√∫n su ID en la tabla order_details).

SELECT DISTINCT order_id
FROM order_details;

-- EJERCICIO 4
-- Los dos primeros pedidos:
-- Como el n√∫mero de pedidos es demasiado alto para visualizarlo de manera pr√°ctica en la consulta anterior, 
-- vamos a limitar los resultados s√≥lo a los 2 primeros pedidos para verlos m√°s en detalle. Sin embargo, en la tabla OrderDetails 
-- pueden existir varios registros para cada pedido, por lo que no nos servir√° con un uso normal del comando LIMIT.

SELECT DISTINCT order_id
FROM order_details
LIMIT 2;

-- EJERCICIO 5
-- Qu√© pedidos han gastado m√°s:
-- Una vez hemos inspeccionado el tipo de pedidos que tenemos en la empresa, 
-- desde la direcci√≥n nos piden conocer los 3 pedidos que han supuesto un mayor coste econ√≥mico total para la empresa. 
-- Calc√∫lalo y dale el alias ImporteTotal. Nota: Utiliza unit_price y quantity para calcular el importe total.

SELECT order_id, (unit_price * quantity) AS ImporteTotal
FROM order_details
ORDER BY (unit_price * quantity) DESC
LIMIT 3;

-- EJERCICIO 6
-- Ahora, no sabemos bien por qu√© raz√≥n, desde el departamento de Ventas 
-- nos piden seleccionar el ID de los pedidos situados entre la 5 y la 10 
-- mejor posici√≥n en cuanto al coste econ√≥mico total ImporteTotal.

SELECT order_id, (unit_price * quantity) AS ImporteTotal
FROM order_details
ORDER BY (unit_price * quantity)
LIMIT 5
OFFSET 5;

-- EJERCICIO 7
-- Qu√© categor√≠as tenemos en nuestra BBDD:
-- De cara a ver c√≥mo de diversificado est√° el negocio, se nos solicita una lista 
-- de las categor√≠as que componen los tipos de pedido de la empresa. Queremos que 
-- la lista de resultado sea renombrada como "NombreDeCategoria".

SELECT category_name AS NombreDeCategoria
FROM categories;

-- EJERCICIO 8
/* Selecciona envios con retraso:
Nos hacen llegar desde la direcci√≥n la preocupaci√≥n acerca del cumplimiento de las fechas de env√≠o. 
√öltimamente se est√°n dando retrasos en muchas entregas y por ello se busca realizar la acci√≥n preventiva 
de enviar los paquetes con varios d√≠as adicionales de antelacion. Para comenzar a planear esos env√≠os anticipados, 
nos piden conocer cu√°l ser√≠a la fecha de env√≠o (ShippedDate) de los pedidos almacenados en la base de datos, 
si estos sufrieran un retraso de 5 d√≠as. Nos piden mostrar la nueva fecha renombrada como FechaRetrasada.
üí° Pista üí° Para realizar lo anterior, busca documentaci√≥n de la funci√≥n DATE_ADD para MySQL.
*/
SELECT order_id, order_date, shipped_date, DATE_ADD(shipped_date, INTERVAL(5) DAY) AS FechaRetrasada
FROM orders;

-- EJERCICIO 9
/*Selecciona los productos m√°s rentables:
Gracias a un an√°lisis realizado en los √∫ltimos meses en la empresa, se ha comprobado 
que el rango de productos que puede dar m√°s beneficios parece ser el de aquellos con 
un precio mayor o igual a 15 d√≥lares, pero menor o igual que 50 d√≥lares. 
Selecciona los datos de ese rango de productos usando el operador BETWEEN./*




-- EJERCICIO 10